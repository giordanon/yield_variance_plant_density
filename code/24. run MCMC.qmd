---
title: "24. run MCMC"
format: html
editor: visual
---

```{r message = FALSE, warning = FALSE}
source("MCMC REFINED.R")
library(multidplyr)
library(tidyverse)
library(tidybayes)
library(truncnorm)
```

# Canadian data

```{r}
data <- readRDS("../data/data_ye2.RData") %>% 
  rename_all(~str_replace(.,"2","")) %>% 
  filter(SOURCE == "Canada")
```

```{r}
parameterStart <- c("b1" = 0.05,
                    "AOPD" = 150,
                    "a1" = 0.020,
                    "maxVPD" = 50,
                    "minVPD" = 150)

sigmaTune <- c(0.005,10, 0.005,10,10)

iterations <- 1e6
burnIn <- 0.2
thinning <- 5
groups <- c("SOURCE")

# Load custom functions and local variables into clusters
environment <- c( 
  # MCMC algorithm
  "metropolisMCMC",
  # Prelim MCMC stuff
  "parameterStart","sigmaTune","iterations", "burnIn","thinning", 
  # Functions
  "quadPlateau","expPlateau","likelihood", "priors", "posterior","proposalFunction"
  )
```

```{r}
runSplits(data, groups, iterations,
          burnIn, thinning, parameterStart,
          sigmaTune, environment, "model_canada")
```

```{r}
model <- readRDS("../output/model/model_canada.RData")
# Trace plots
tracePlots(model)
step <- 1
groups <- c("SOURCE")
getSummaries(model, groups, step, "summaries_canada")

```

# Kansas data

Read data

```{r}
data <- readRDS("../data/data_ye2.RData") %>% 
  rename_all(~str_replace(.,"2","")) %>% 
  filter(SOURCE == "Kansas")
```

Define local variables

```{r}
parameterStart <- c("b1" = 0.05,
                    "AOPD" = 120,
                    "a1" = 0.020,
                    "maxVPD" = 50,
                    "minVPD" = 150)

sigmaTune <- c(0.005,10, 0.005,10,10)

iterations <- 100e6
burnIn <- 0.2
thinning <- 5
groups <- c("YE", "TRT", "CLEAN")

# Load custom functions and local variables into clusters
environment <- c( 
  # MCMC algorithm
  "metropolisMCMC",
  # Prelim MCMC stuff
  "parameterStart","sigmaTune","iterations", "burnIn","thinning",
  # Canadian priors info
  "q50", "sd","q99",
  # Functions
  "quadPlateau","expPlateau","likelihood", "priors", "posterior","proposalFunction"
)
```

```{r}
runSplits(data, groups, iterations, burnIn, thinning, parameterStart,sigmaTune, environment, filename = "model_kansas")
```

Run the model with no thinning to assess autocorrelation between MCMC samples

```{r}
thinning <- 1000
runSplits(data, groups, iterations, burnIn, thinning,
          parameterStart,sigmaTune, environment, filename = "model_kansas_all_samples")
```

```{r}
kansas <- readRDS( "../output/model/model_kansas_all_samples.RData")



acfPlot <- function(mod, lag){
  
  for (i in 1:nrow(mod)){

    out <- mod$mod[[i]]
    
    title <- paste0(mod$YE[i],"_", mod$TRT[i], "_", mod$CLEAN[i])
    filename <- paste0("../output/plots/trace/acf_", title, ".png")
    
    png(filename, width=800, height=180) 
    par(mfrow = c(1,5))
    acf(out[,"b1"], lag.max = lag, main="b1")
    acf(out[,"AOPD"], lag.max = lag,  main="AOPD")
    acf(out[,"a1"], lag.max = lag, main="a1")
    acf(out[,"maxVPD"], lag.max = lag, main="maxVPD")
    acf(out[,"minVPD"], lag.max = lag, main="minVPD")
    title(title, outer = TRUE)
    
    # Close the PNG device
    dev.off()

  }
}

acfPlot(kansas, 60)
tracePlots(kansas)

model <- readRDS("../output/model/model_canada.RData")
q99 <- apply(model$mod[[1]], 2, quantile ,probs = .99)
q50 <- apply(model$mod[[1]], 2, quantile ,probs = .5)
q01 <- apply(model$mod[[1]], 2, quantile ,probs = .001)

sd <-  estimateSD(q50, q99)

hist(rnorm(1000,160,15*1.5))
```

```{r}
model <- readRDS("../output/model/model_kansas.RData")
tracePlots(model)
```

Extract model summaries

```{r}
model <- readRDS("../output/model/model_kansas.RData")
step <- 1
groups <- c("YE", "TRT", "CLEAN")
getSummaries(model, groups, step, "summaries")

```

Conquer Kansas model

First summarise data

```{r}
data <- readRDS("../data/data_ye2.RData") %>% 
  rename_all(~str_replace(.,"2","")) %>% 
  filter(SOURCE == "Kansas") %>% 
  dplyr::select(STAND, YIELD) %>% 
  ungroup() %>% 
  nest()
```


```{r}
mod <- readRDS("../output/model/model_kansas_50M.RData")

ksAll <- mod %>% 
  dplyr::select(-data) %>% 
  mutate(.,
         mod = map(mod, ~as.data.frame(.)), 
         # Create a fake groupping column
         group = "group"
         ) %>% 
  unnest(cols = mod) %>% 
  select(-c(YE:CLEAN)) %>%  
  group_by(group) %>% 
  nest(.key = "mod") %>% 
  # backtransform to a matrix
  mutate(.,
         mod = map(mod, ~as.matrix(.)), 
         ) %>% 
  cbind(data)


step <- 1
groups <- c("group")
getSummaries(ksAll, groups, step, "summaries_50M_ksAll")

```

